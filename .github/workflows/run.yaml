# name: development build

# on:
#   pull_request:
#     branches:
#       - 'main'
#     types: [opened, synchronize, closed]

# permissions:
#   contents: 'read'
#   id-token: 'write'
#   pull-requests: 'write'
#   actions: 'read'

# jobs:
#   pr-labeler:
#     runs-on: ubuntu-20.04
#     steps:
#       - uses: TimonVS/pr-labeler-action@v4
#         with:
#           configuration-path: .github/pr-labeler.yml # optional, .github/pr-labeler.yml is the default value
#           repo-token: ${{ secrets.GITHUB_TOKEN }}
#   build:
#     runs-on: ubuntu-20.04
#     env:
#       ENV: dev
#       PROJECT_NUMBER: 354003524541
#       COMPONENT: zozo-module-recommendations-api
#       GCP_PROJECT_PREFIX: zozo-recommendations
#       DOCKER_IMAGE_URI: gcr.io/zozo-recommendations-dev/zozo-module-recommendations-api
#     steps:
#     - uses: actions/checkout@v3

#     - name: Set up JDK 11
#       uses: actions/setup-java@v3
#       with:
#         java-version: 11
#         distribution: 'zulu'

#     # Setup tmate session to debug via SSH. See https://github.com/mxschmitt/action-tmate
#     # - uses: mxschmitt/action-tmate@v3

#     - name: Authenticate to Google Cloud
#       id: google-cloud-auth
#       uses: google-github-actions/auth@v1
#       with:
#         create_credentials_file: true
#         workload_identity_provider: projects/${{env.PROJECT_NUMBER}}/locations/global/workloadIdentityPools/github-oidc-pool/providers/github-actions
#         service_account: module-api-actions@zozo-recommendations-${{ env.ENV }}.iam.gserviceaccount.com

#     - name: Google Cloud login
#       run: |
#         gcloud --version
#         gcloud auth login --brief --cred-file=${{ steps.google-cloud-auth.outputs.credentials_file_path }}
#         gcloud auth configure-docker --quiet
#         export GOOGLE_CREDENTIALS=${{ steps.google-cloud-auth.outputs.credentials_file_path }}
#         export GOOGLE_APPLICATION_CREDENTIALS=${{ steps.google-cloud-auth.outputs.credentials_file_path }}

#     - name: lint
#       run: |
#         set -eo pipefail
#         mvn -version
#         mvn spotless:check | egrep -v '^(Download|Progress)'

#     - name: mvn test
#       run: |
#         ENV=dev ./scripts/test.sh

#     - name: docker build -t zozo-module-recommendations-api
#       run: |
#         set -eo pipefail
#         mvn -version
#         mvn compile jib:dockerBuild | egrep -v '^(Download|Progress)'

#     - name: docker push
#       if: github.event.pull_request.merged == true
#       run: |
#         docker tag zozo-module-recommendations-api:latest ${DOCKER_IMAGE_URI}:latest
#         docker tag zozo-module-recommendations-api:latest ${DOCKER_IMAGE_URI}:gitsha-${GITHUB_SHA}
#         docker push ${DOCKER_IMAGE_URI}:latest
#         docker push ${DOCKER_IMAGE_URI}:gitsha-${GITHUB_SHA}

#     - name: insert config file data into BigQuery and GCS
#       run: |
#         set -o pipefail

#         for dev in develop dev1 dev2 dev3 dev4 dev5 dev6 dev7 dev8 dev9 dev10 dev11 dev12 dev13 dev14 dev15 dev16 dev17 dev18 dev19 dev20; do
#           mvn clean compile exec:java -Dexec.mainClass=com.zozo.tech.module.recommendations.api.batch.ConfigHistoryBatch -Dexec.cleanupDaemonThreads=false | egrep -v '^(Download|Progress)'
          
#         done
#       env:
#         PR_NUMBER: ${{ github.event.pull_request.number }}
#         GCS_BUCKET: zozo-recommendations-${ENV}-module
#         RANKING_MASTER_PATH: ${GITHUB_WORKSPACE:-.}/src/main/resources/ranking_master_dev.json
#         MODULE_MASTER_PATH: ${GITHUB_WORKSPACE:-.}/src/main/resources/module_master_dev.json
#         PRESET_MASTER_PATH: ${GITHUB_WORKSPACE:-.}/src/main/resources/preset_master_dev.json
#         INSERT_MODULE_MASTER_PATH: ${GITHUB_WORKSPACE:-.}/src/main/resources/insert_module_master_dev.json
#         GCS_RANKING_MASTER_PATH: resources/ranking_master_dev.json
#         GCS_MODULE_MASTER_PATH: resources/module_master_dev.json
#         GCS_PRESET_MASTER_PATH: resources/preset_master_dev.json
#         GCS_INSERT_MODULE_MASTER_PATH: resources/insert_module_master_dev.json